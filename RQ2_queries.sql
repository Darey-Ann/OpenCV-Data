-- Code for the paper "OpenCV on Stack Overflow: A Study on Developer Discussions"
-- Darey-Ann Louisville
-- ______________________________________________________________________________________
-- 24 May 2021

-- ######################################################################################
-- ######################################################################################
-- RQ2: Which question types are developers asking?
-- ######################################################################################
-- ######################################################################################
-- Used question coding framework of:
-- Christoph Treude, Ohad Barzilay, and Margaret-Anne Storey. 2011. How do programmers ask and answer questions on the web? (NIER track). In Proceedings of the 33rd International Conference on Software Engineering (ICSE ’11), Association for Computing Machinery, New York, NY, USA, 804–807. DOI:https://doi.org/10.1145/1985793.1985907

-- OVERVIEW
-------------
-- 01. CREATE POSTS SUBSET FOR QUESTION TYPES 
-- 02. GET BODIES FOR THE POST SUBSET POSTS
-- 03. CLASSIFY WITH QUERY
-- 04. MANUAL CLASSIFICATION
-- 05. FINAL RQ2 CLASSIFICATIONT TABLE
-- 06. ANALYSIS
-- ______________________________________________________________________________________





------------------------------------------------------------------------------
-- 01. CREATE POSTS SUBSET FOR QUESTION TYPES 
------------------------------------------------------------------------------
--    (sample of 612 posts from answered and unanswered posts)

-- Create table with below query 
-- table name: RQ2_SAMPLE 

select * from -- selects subset of 612
(select *     -- all posts with score >=0 in random order (total: 61120 posts)
 from
    ( select * from vw_ans
      union
      select * from vw_noans
    )
 order by dbms_random.value 
)
where rownum <= 612; --  1% sample (612 posts)


------------------------------------------------------------------------------
-- 02. GET BODIES FOR THE POST SUBSET POSTS
------------------------------------------------------------------------------
-- The posts in RQ2_SAMPLE have no bodies, so query those from SEDE separately

-- Create table with sample IDs
-- table name:  SAMPLE_IDS 
select rownum sample_rownum
,      id
from   rq2_sample
order by 1;

-- split into 2 due to the listagg character limitation
-- then combine these two and query on SEDE

-- part 1
select listagg(post_id,',') 
from sample_ids
where rowno <= 300
order by post_id
;
-- resulting listagg: (54511677,18656914,49248943,58017367,44645244,18011444,49273845,40545399,53660065,61478112,28398188,64614299,46312233,23998775,61638563,26973970,28721614,38466701,41861453,22899647,62834316,37528356,37568539,44870145,15029852,19857691,66114679,17234892,56664240,65787046,45946072,28616072,66271934,21833103,41521089,10377400,61651413,52207976,27623528,54395985,18034518,6620997,49843187,63470866,45460480,59210423,58920162,49547578,66510138,46673309,56787601,50232744,65000814,3243392,53708280,12125180,48958580,31917237,39207771,59311078,19735027,50833767,1853060,58600556,37776228,10862532,20739340,8286068,58049302,64780737,57682422,38657849,40210583,61028405,30859824,39321336,55342185,712998,25636597,61590392,64659657,59032322,53958214,39421401,63816931,37331040,10206837,18680709,28770921,62735709,15458034,32208193,49911257,64383540,49706803,39968357,22449944,31586262,55899665,29987881,29012315,15103524,20064818,66117287,19342547,62269764,18000585,43394437,11492214,11909678,66938989,31594474,60502281,44076584,17938360,67149120,35887187,21103042,16289415,13654600,22915220,17060914,25259315,49118029,41100909,39042674,8951162,64969032,49962052,62704531,27683958,62829519,54160065,13699532,28797175,46415210,62951152,55468817,32175146,23381912,61351685,50607995,24225912,47993294,31879504,7399846,19632227,32287032,56977429,21421070,27537149,29894541,45447044,22561372,64881771,48022470,37062898,54327129,53183802,21152303,46580148,17162559,57827684,3964300,4577696,33599454,56121338,25909260,28273739,54339041,5560726,8767205,13333113,27820970,36803713,20523540,44371953,43922974,35161002,50305634,18308695,62981621,12202755,42255410,59867659,42803803,41894645,36138741,20115981,33990259,13762441,28762701,43299440,7363445,46396711,28101902,47486245,6025539,38365900,35311176,53896411,46563364,18548495,54803180,19560221,66648067,15958593,43180053,39409533,46065119,63510686,46036216,22233959,62608227,61952650,43804958,14545786,44825612,33625186,37247187,31161341,55891928,26433044,43642898,28762670,63836180,49397941,26376695,52446599,35750377,63412606,15079748,1914416,45286172,63039568,63110817,54991771,7331105,31433634,54239565,45270099,48284153,52860469,35845687,2158901,56555714,64600696,49778388,58427555,25881902,53141571,17473061,30186061,62017837,36794048,60183243,48544759,67186084,46290185,18819480,13095019,24777378,35443015,61533206,9804254,44159348,64903449,57230407,33056711,62519920,62339816,9381779,64413486,48236881,67244666,66229372,66612266,23648494,29703059,37781244,56534826,12489652,11360867,50296181,8535650,31040527,14308089,46100927,6294491,54748189,30116089,54711595,29898594,11142643,3447512,17860949,22396285,50801837,51299125,16098238)

-- part 2
select listagg(post_id,',') 
from sample_ids
where rowno > 300
order by post_id
;
-- resulting listagg: (52990708,18976841,40416774,37515592,15352074,29121690,62758938,39947589,35109561,41226790,62254038,57065831,5226906,15966722,27848802,34842547,9060254,58910170,19768508,46207912,38696383,64892983,49839340,22286806,38528363,56448812,57069542,35062732,59132795,62143120,33111618,3185856,2597302,52465856,63596796,34277123,30430479,54469531,29557197,49288154,29831618,55059838,18514433,22306268,31401490,67099167,24996186,56131466,36032395,22125146,28635555,66023168,11641785,13971552,29356283,22003441,63833899,53995738,38507823,4647369,51022360,52019031,64231087,50196514,48177052,31498095,36794477,24943301,39971846,25734545,40731428,63084676,65612402,55530787,29355668,33527416,63351100,66905335,16610824,19246668,65023314,64650877,21316702,44486471,32542853,50179822,47675328,30162325,59124533,25648878,65421554,55158339,36387602,26233010,16980496,43666696,36338057,15413511,53537361,25835111,11176421,51779932,46188667,54392951,47553296,56017030,62448433,54560346,45179141,64921919,62305127,19632401,29136947,54172058,16572476,49914888,20750001,35449332,23595544,47253198,9809722,29168967,22335166,23983840,18746907,13181676,32462108,40466975,59053594,18557119,45782637,55914690,37466723,59559148,66333712,7152195,6975352,15710006,62969137,15162039,30167662,22498373,65070112,67061711,54297644,13566458,5744328,57231962,25343731,44915272,14010825,35664448,12154932,66708076,22174668,22419298,28825520,16443751,30090074,15155016,30012166,14245401,35353876,32234470,36285454,27252350,42907203,56275515,53307823,41977043,15678585,47206699,48490206,37736866,64952508,41992744,18536548,28050460,51659595,52024946,51414835,34790480,52208482,12881632,30291023,57120371,42872353,26710022,36549256,18985124,36065724,29586866,45975216,41872816,12894507,16974370,11117934,60933134,12107666,24435268,8859223,51560541,32035579,42627250,15202475,42033093,11878766,17153951,17155005,49379168,60005257,39586623,37158743,16341349,18910665,19214408,39815854,46803465,52644348,52965975,36955972,41517429,36633202,8613881,54928793,41458022,48109837,58271150,34202142,19623132,21991639,58764964,60509829,46690247,20304118,15690770,21696097,40327011,58473998,32581128,37484254,16144033,62070422,41831950,56138536,27977614,60264914,57655803,13282098,65515816,50066353,20159579,44212063,47773560,45772655,64871134,25879045,20709398,28412794,15952040,38508161,33251473,33415352,17914074,44266912,32144128,16157326,34914947,26794003,31775801,22027419,23277969,50787891,35479573,66093317,53915207,54843550,51911171,43057938,38360461,63852167,14008288,45164325,47786868,62975260,5652085,46776280,29286478,53980412,15479203,20766488,40677856,25448028,56817023,11172408,53755187,31489583,22693923,19843459,14945160,29988594,36909079,58911339,7722296,43844365,3444634,61369587,60405739,64021074,3628686,56580599,3761484)

-- THE BODIES
-- on SEDE run:
select "Id"
,      "Title"
,      "Body"
from Posts
where "Id" in
(54511677,18656914,49248943,58017367,44645244,18011444,49273845,40545399,53660065,61478112,28398188,64614299,46312233,23998775,61638563,26973970,28721614,38466701,41861453,22899647,62834316,37528356,37568539,44870145,15029852,19857691,66114679,17234892,56664240,65787046,45946072,28616072,66271934,21833103,41521089,10377400,61651413,52207976,27623528,54395985,18034518,6620997,49843187,63470866,45460480,59210423,58920162,49547578,66510138,46673309,56787601,50232744,65000814,3243392,53708280,12125180,48958580,31917237,39207771,59311078,19735027,50833767,1853060,58600556,37776228,10862532,20739340,8286068,58049302,64780737,57682422,38657849,40210583,61028405,30859824,39321336,55342185,712998,25636597,61590392,64659657,59032322,53958214,39421401,63816931,37331040,10206837,18680709,28770921,62735709,15458034,32208193,49911257,64383540,49706803,39968357,22449944,31586262,55899665,29987881,29012315,15103524,20064818,66117287,19342547,62269764,18000585,43394437,11492214,11909678,66938989,31594474,60502281,44076584,17938360,67149120,35887187,21103042,16289415,13654600,22915220,17060914,25259315,49118029,41100909,39042674,8951162,64969032,49962052,62704531,27683958,62829519,54160065,13699532,28797175,46415210,62951152,55468817,32175146,23381912,61351685,50607995,24225912,47993294,31879504,7399846,19632227,32287032,56977429,21421070,27537149,29894541,45447044,22561372,64881771,48022470,37062898,54327129,53183802,21152303,46580148,17162559,57827684,3964300,4577696,33599454,56121338,25909260,28273739,54339041,5560726,8767205,13333113,27820970,36803713,20523540,44371953,43922974,35161002,50305634,18308695,62981621,12202755,42255410,59867659,42803803,41894645,36138741,20115981,33990259,13762441,28762701,43299440,7363445,46396711,28101902,47486245,6025539,38365900,35311176,53896411,46563364,18548495,54803180,19560221,66648067,15958593,43180053,39409533,46065119,63510686,46036216,22233959,62608227,61952650,43804958,14545786,44825612,33625186,37247187,31161341,55891928,26433044,43642898,28762670,63836180,49397941,26376695,52446599,35750377,63412606,15079748,1914416,45286172,63039568,63110817,54991771,7331105,31433634,54239565,45270099,48284153,52860469,35845687,2158901,56555714,64600696,49778388,58427555,25881902,53141571,17473061,30186061,62017837,36794048,60183243,48544759,67186084,46290185,18819480,13095019,24777378,35443015,61533206,9804254,44159348,64903449,57230407,33056711,62519920,62339816,9381779,64413486,48236881,67244666,66229372,66612266,23648494,29703059,37781244,56534826,12489652,11360867,50296181,8535650,31040527,14308089,46100927,6294491,54748189,30116089,54711595,29898594,11142643,3447512,17860949,22396285,50801837,51299125,16098238)
-- 61651413 was missing from SEDE at the time
union
select "Id"
,      "Title"
,      "Body"
from Posts
where "Id" in
(52990708,18976841,40416774,37515592,15352074,29121690,62758938,39947589,35109561,41226790,62254038,57065831,5226906,15966722,27848802,34842547,9060254,58910170,19768508,46207912,38696383,64892983,49839340,22286806,38528363,56448812,57069542,35062732,59132795,62143120,33111618,3185856,2597302,52465856,63596796,34277123,30430479,54469531,29557197,49288154,29831618,55059838,18514433,22306268,31401490,67099167,24996186,56131466,36032395,22125146,28635555,66023168,11641785,13971552,29356283,22003441,63833899,53995738,38507823,4647369,51022360,52019031,64231087,50196514,48177052,31498095,36794477,24943301,39971846,25734545,40731428,63084676,65612402,55530787,29355668,33527416,63351100,66905335,16610824,19246668,65023314,64650877,21316702,44486471,32542853,50179822,47675328,30162325,59124533,25648878,65421554,55158339,36387602,26233010,16980496,43666696,36338057,15413511,53537361,25835111,11176421,51779932,46188667,54392951,47553296,56017030,62448433,54560346,45179141,64921919,62305127,19632401,29136947,54172058,16572476,49914888,20750001,35449332,23595544,47253198,9809722,29168967,22335166,23983840,18746907,13181676,32462108,40466975,59053594,18557119,45782637,55914690,37466723,59559148,66333712,7152195,6975352,15710006,62969137,15162039,30167662,22498373,65070112,67061711,54297644,13566458,5744328,57231962,25343731,44915272,14010825,35664448,12154932,66708076,22174668,22419298,28825520,16443751,30090074,15155016,30012166,14245401,35353876,32234470,36285454,27252350,42907203,56275515,53307823,41977043,15678585,47206699,48490206,37736866,64952508,41992744,18536548,28050460,51659595,52024946,51414835,34790480,52208482,12881632,30291023,57120371,42872353,26710022,36549256,18985124,36065724,29586866,45975216,41872816,12894507,16974370,11117934,60933134,12107666,24435268,8859223,51560541,32035579,42627250,15202475,42033093,11878766,17153951,17155005,49379168,60005257,39586623,37158743,16341349,18910665,19214408,39815854,46803465,52644348,52965975,36955972,41517429,36633202,8613881,54928793,41458022,48109837,58271150,34202142,19623132,21991639,58764964,60509829,46690247,20304118,15690770,21696097,40327011,58473998,32581128,37484254,16144033,62070422,41831950,56138536,27977614,60264914,57655803,13282098,65515816,50066353,20159579,44212063,47773560,45772655,64871134,25879045,20709398,28412794,15952040,38508161,33251473,33415352,17914074,44266912,32144128,16157326,34914947,26794003,31775801,22027419,23277969,50787891,35479573,66093317,53915207,54843550,51911171,43057938,38360461,63852167,14008288,45164325,47786868,62975260,5652085,46776280,29286478,53980412,15479203,20766488,40677856,25448028,56817023,11172408,53755187,31489583,22693923,19843459,14945160,29988594,36909079,58911339,7722296,43844365,3444634,61369587,60405739,64021074,3628686,56580599,3761484)

-- Save as excel file

/* missing record
select * from rq2_sample
where id = 61651413
*/

-- replace this with a random record
select * from -- selects subset of 612
(select * -- all posts with score >=0 in random order
from
(select * from vw_ans
union
select * from vw_noans
)
where id not in 
(54511677,18656914,49248943,58017367,44645244,18011444,49273845,40545399,53660065,61478112,28398188,64614299,46312233,23998775,61638563,26973970,28721614,38466701,41861453,22899647,62834316,37528356,37568539,44870145,15029852,19857691,66114679,17234892,56664240,65787046,45946072,28616072,66271934,21833103,41521089,10377400,61651413,52207976,27623528,54395985,18034518,6620997,49843187,63470866,45460480,59210423,58920162,49547578,66510138,46673309,56787601,50232744,65000814,3243392,53708280,12125180,48958580,31917237,39207771,59311078,19735027,50833767,1853060,58600556,37776228,10862532,20739340,8286068,58049302,64780737,57682422,38657849,40210583,61028405,30859824,39321336,55342185,712998,25636597,61590392,64659657,59032322,53958214,39421401,63816931,37331040,10206837,18680709,28770921,62735709,15458034,32208193,49911257,64383540,49706803,39968357,22449944,31586262,55899665,29987881,29012315,15103524,20064818,66117287,19342547,62269764,18000585,43394437,11492214,11909678,66938989,31594474,60502281,44076584,17938360,67149120,35887187,21103042,16289415,13654600,22915220,17060914,25259315,49118029,41100909,39042674,8951162,64969032,49962052,62704531,27683958,62829519,54160065,13699532,28797175,46415210,62951152,55468817,32175146,23381912,61351685,50607995,24225912,47993294,31879504,7399846,19632227,32287032,56977429,21421070,27537149,29894541,45447044,22561372,64881771,48022470,37062898,54327129,53183802,21152303,46580148,17162559,57827684,3964300,4577696,33599454,56121338,25909260,28273739,54339041,5560726,8767205,13333113,27820970,36803713,20523540,44371953,43922974,35161002,50305634,18308695,62981621,12202755,42255410,59867659,42803803,41894645,36138741,20115981,33990259,13762441,28762701,43299440,7363445,46396711,28101902,47486245,6025539,38365900,35311176,53896411,46563364,18548495,54803180,19560221,66648067,15958593,43180053,39409533,46065119,63510686,46036216,22233959,62608227,61952650,43804958,14545786,44825612,33625186,37247187,31161341,55891928,26433044,43642898,28762670,63836180,49397941,26376695,52446599,35750377,63412606,15079748,1914416,45286172,63039568,63110817,54991771,7331105,31433634,54239565,45270099,48284153,52860469,35845687,2158901,56555714,64600696,49778388,58427555,25881902,53141571,17473061,30186061,62017837,36794048,60183243,48544759,67186084,46290185,18819480,13095019,24777378,35443015,61533206,9804254,44159348,64903449,57230407,33056711,62519920,62339816,9381779,64413486,48236881,67244666,66229372,66612266,23648494,29703059,37781244,56534826,12489652,11360867,50296181,8535650,31040527,14308089,46100927,6294491,54748189,30116089,54711595,29898594,11142643,3447512,17860949,22396285,50801837,51299125,16098238,
52990708,18976841,40416774,37515592,15352074,29121690,62758938,39947589,35109561,41226790,62254038,57065831,5226906,15966722,27848802,34842547,9060254,58910170,19768508,46207912,38696383,64892983,49839340,22286806,38528363,56448812,57069542,35062732,59132795,62143120,33111618,3185856,2597302,52465856,63596796,34277123,30430479,54469531,29557197,49288154,29831618,55059838,18514433,22306268,31401490,67099167,24996186,56131466,36032395,22125146,28635555,66023168,11641785,13971552,29356283,22003441,63833899,53995738,38507823,4647369,51022360,52019031,64231087,50196514,48177052,31498095,36794477,24943301,39971846,25734545,40731428,63084676,65612402,55530787,29355668,33527416,63351100,66905335,16610824,19246668,65023314,64650877,21316702,44486471,32542853,50179822,47675328,30162325,59124533,25648878,65421554,55158339,36387602,26233010,16980496,43666696,36338057,15413511,53537361,25835111,11176421,51779932,46188667,54392951,47553296,56017030,62448433,54560346,45179141,64921919,62305127,19632401,29136947,54172058,16572476,49914888,20750001,35449332,23595544,47253198,9809722,29168967,22335166,23983840,18746907,13181676,32462108,40466975,59053594,18557119,45782637,55914690,37466723,59559148,66333712,7152195,6975352,15710006,62969137,15162039,30167662,22498373,65070112,67061711,54297644,13566458,5744328,57231962,25343731,44915272,14010825,35664448,12154932,66708076,22174668,22419298,28825520,16443751,30090074,15155016,30012166,14245401,35353876,32234470,36285454,27252350,42907203,56275515,53307823,41977043,15678585,47206699,48490206,37736866,64952508,41992744,18536548,28050460,51659595,52024946,51414835,34790480,52208482,12881632,30291023,57120371,42872353,26710022,36549256,18985124,36065724,29586866,45975216,41872816,12894507,16974370,11117934,60933134,12107666,24435268,8859223,51560541,32035579,42627250,15202475,42033093,11878766,17153951,17155005,49379168,60005257,39586623,37158743,16341349,18910665,19214408,39815854,46803465,52644348,52965975,36955972,41517429,36633202,8613881,54928793,41458022,48109837,58271150,34202142,19623132,21991639,58764964,60509829,46690247,20304118,15690770,21696097,40327011,58473998,32581128,37484254,16144033,62070422,41831950,56138536,27977614,60264914,57655803,13282098,65515816,50066353,20159579,44212063,47773560,45772655,64871134,25879045,20709398,28412794,15952040,38508161,33251473,33415352,17914074,44266912,32144128,16157326,34914947,26794003,31775801,22027419,23277969,50787891,35479573,66093317,53915207,54843550,51911171,43057938,38360461,63852167,14008288,45164325,47786868,62975260,5652085,46776280,29286478,53980412,15479203,20766488,40677856,25448028,56817023,11172408,53755187,31489583,22693923,19843459,14945160,29988594,36909079,58911339,7722296,43844365,3444634,61369587,60405739,64021074,3628686,56580599,3761484)

order by dbms_random.value
)
where rownum = 1;

-- get body for replacement record from SEDE
select "Id"
,      "Title"
,      "Body"
from Posts
where "Id" in
(25483269)

-- save as an excel file, import in SQL Developer as table RQ2_SAMPLE_BODIES
-- sanity check id: 11641785  should have good handling of characters
-- 61651413 should not be there, it should be replaced with 25483269



------------------------------------------------------------------------------
-- 03. CLASSIFY WITH QUERY
------------------------------------------------------------------------------
-- went through titles and bodies manually to determine the identifiers

-- export to excel - CLASSIFY STEP 1
-- this table is the sample table with 612 posts + bodies + question type classification
create table rq2_classification as
select case when lower(rsb.title)     like '%homework%'
                 or lower(rsb.body)   like '%homework%'     
                 or lower(rsb.body)   like '%university%'     
                 or lower(rsb.body)   like '%school%'       then 'Homework'
            when lower(rsb.title)     like '%newbie%'
                 or lower(rsb.body)   like '%newbie%'     
                 or lower(rsb.body)   like '%i''m new%'     
                 or lower(rsb.body)   like '%i''m really new%'     
                 or lower(rsb.body)   like '%im new%'     
                 or lower(rsb.body)   like '%beginner%'     
                 or lower(rsb.body)   like '%beginer%'     
                 or lower(rsb.body)   like '%novice%'     
                 or lower(rsb.body)   like '%inexperience%'     
                 or lower(rsb.body)   like '%just starting%'     
                 or lower(rsb.body)   like '%just started%'     
                 or lower(rsb.body)   like '%recently i''m learning%'     
                 or lower(rsb.body)   like '%started%learn%'     
                 or lower(rsb.body)   like '%learning code%'     
                 or lower(rsb.body)   like '%i am new%'     then 'Novice'
            when lower(rsb.title)     like 'do i %'
                 or lower(rsb.title)  like '%should i %'    
                 or lower(rsb.body)   like '%should i %'    then 'Decision Help'
            when lower(rsb.title)     like '%how to%'
                 or lower(rsb.title)  like '%how can%'
                 or lower(rsb.title)  like '% how %'
                 or lower(rsb.title)  like '%how do%'       then 'How To'         
            when lower(rsb.title)     like '%can %'         
                 or lower(rsb.title)  like 'is %'        
                 or lower(rsb.title)  like '%is there%'        
                 or lower(rsb.title)  like '%possibility%'  
                 or lower(rsb.title)  like 'what %'         
                 or lower(rsb.title)  like 'why%'           
                 or lower(rsb.title)  like 'how is %'           
                 or lower(rsb.title)  like '%difference%'   then 'Information'
            when lower(rsb.title)     like '%error%'        
                 or lower(rsb.title)  like '%exception%'    then 'Error'
            when lower(rsb.title)     like '%install%'
                 or lower(rsb.body)   like '%install%'      then 'Installation'
            when lower(rsb.body)      like '%<pre%><code>%'
                 or lower(rsb.body)   like '%<p><code>%'    then 'Review'
       else null end question_type
,      case when pai.post_answercount != 0 and minutes_until_answer is not null then 'answer_acc'
            when pai.post_answercount != 0 and minutes_until_answer is     null then 'answer_noacc'
            else 'no_answer' end answer_status       
,      rsb.id
,      rsb.title
,      rsb.body
,      rs.tags
from   rq2_sample_bodies               rsb
left outer join rq2_sample             rs  on rs.id = rsb.id
left outer join posts_answer_intervals pai on pai.post_title = rs.title -- to get the answercounts
order by 1,2;


------------------------------------------------------------------------------
-- 04. MANUAL CLASSIFICATION
------------------------------------------------------------------------------
-- Checks
-- title: Bug in opencv 3 C++ feature specification in blobdetector? -- is discrepancy
-- title: JNI Assertion Failed -- is homework

-- in CLASSIFY STEP 2: refine the categories per post
-- made separate table to fill in categories manually:
create table rq2_classification_to_fill_in as
select * 
from rq2_classification
where question_type is null ;


-- Novice has since been updated, select listagg(id,',') from rq2_classification_final with new novice where clause 
-- update as below 
-- not this:
update rq2_classification_to_fill_in -- rq2_classification
--update rq2_classification
set question_type = 'Novice'
where id in (36065724,53915207,12154932,19623132,19857691,28398188,38360461,36794477,21833103,47253198,18680709,12125180,11641785,17153951,19768508,24435268,20064818,21152303,33990259,31161341,35887187,49379168,49706803,15202475,24777378,52446599,62070422,20304118,37062898,63833899)
;

-- but this:
update rq2_classification_final
set question_type = 'Novice'
where id in (53537361,11641785,49273845,36794477,46207912,21152303,20064818,16572476,36065724,66117287,34202142,19857691,54928793,27820970,37062898,20304118,31161341,53915207,3243392,60405739,23983840,20159579,62070422,15202475,63510686,54560346,55059838,49379168,35887187,33990259,24435268,19768508,12125180,18680709,47253198,21833103,28398188,25636597,19623132,12154932,63852167,63833899,52446599,26710022,49706803,17153951,37158743,38360461,18011444,24777378,50296181
);

-- table with everything
declare
    cursor c_filled
    is
    (select * from rq2_classification_to_fill_in);
begin
for r in c_filled
    loop
        update rq2_classification
        set   question_type =  r.question_type
        where id            =  r.id;
    end loop;
end;


------------------------------------------------------------------------------
-- 05. FINAL RQ2 CLASSIFICATIONT TABLE
------------------------------------------------------------------------------
-- Create the final classification table
-- table name: RQ2_CLASSIFICATION_FINAL
create table rq2_classification_final as
select * from rq2_classification;


------------------------------------------------------------------------------
-- 06. ANALYSIS
------------------------------------------------------------------------------
-- percentages

select question_type
,      answer_status
,      count(*)      ct
from rq2_classification_final
group by question_type, answer_status;

-- with pivot
-- see excel file questiom types - description

SELECT * FROM
(
  select question_type
  ,      answer_status
  ,      count(*)      ct
  from rq2_classification_final
  group by question_type, answer_status
)
PIVOT
(
  SUM(ct)
  FOR answer_status IN ('answer_acc', 'answer_noacc', 'no_answer')
)
ORDER BY question_type;


--- distribution of answers per question
select nvl(answercount,0)              "number of answers per question"
,      count(*)                        "number of questions with that number of answers"
,      round(log(10,count(*)),1)       "number of questions with that number of answers using a log scale"
from (select * from vw_ans union select * from vw_noans)
group by answercount
order by 1;



